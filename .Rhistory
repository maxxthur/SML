RIDGE <- glmnet(x = X, y = y, alpha = 0)
LASSO <- glmnet(x = X, y = y, alpha = 1)
LASSO <- glmnet(x = X, y = y, alpha = 1)
```{r}
# d) plot for RIDGE
plot(RIDGE)
# d) plot with xvar = lambda
plot(RIDGE, xvar = "lambda")
# get deviance and lambda
RIDGE_dev_l <- data.frame(deviance = deviance(RIDGE), lambda = RIDGE$lambda)
LASSO_dev_l <- data.frame(deviance = deviance(LASSO), lambda = LASSO$lambda)
# get number of non-zero coefficients and lambda
# step 1 extract coefficients. Rows are Variables, columns correspond to lambda
RIDGE_coef <- coef(RIDGE)
LASSO_coef <- coef(LASSO)
RIDGE_coef
# define an effective 0 as .Machine$double.eps and treat everything smaller as 0
# column sum of logical matrix provides number of non zero coefficients
RIDGE_coef_non_zero <- apply(RIDGE_coef < .Machine$double.eps, MARGIN = 2, sum)
RIDGE_coef_non_zero
# define an effective 0 as .Machine$double.eps and treat everything smaller as 0
# column sum of logical matrix provides number of non zero coefficients
RIDGE_coef_non_zero <- apply(RIDGE_coef > .Machine$double.eps, MARGIN = 2, sum)
LASSO_coef_non_zero <- apply(LASSO_coef > .Machine$double.eps, MARGIN = 2, sum)
RIDGE_coef_non_zero
LASSO_coef_non_zero
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance))
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance), type = "l")
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "l"))
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "ld"))
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "dl"))
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "pl"))
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "l"))
with(LASSO_dev_l, plot(x = lambda, y = deviance, type = "l"))
# plot number of non-zeros in dependence of lambda
plot(x = RIDGE$lambda, y = RIDGE_coef_non_zero)
# plot number of non-zeros in dependence of lambda
plot(x = RIDGE$lambda, y = RIDGE_coef_non_zero, type = "L")
# plot number of non-zeros in dependence of lambda
plot(x = RIDGE$lambda, y = RIDGE_coef_non_zero, type = "l")
plot(x = RIDGE$lambda, y = LASSO_coef_non_zero, type = "l")
# define an effective 0 as .Machine$double.eps and treat everything smaller as 0
# column sum of logical matrix provides number of non zero coefficients
RIDGE_coef_non_zero <- apply(RIDGE_coef > .Machine$double.eps, MARGIN = 2, sum)
LASSO_coef_non_zero <- apply(LASSO_coef > .Machine$double.eps, MARGIN = 2, sum)
# plot deviance in dependence of lambda
with(RIDGE_dev_l, plot(x = lambda, y = deviance, type = "l"))
with(LASSO_dev_l, plot(x = lambda, y = deviance, type = "l"))
# plot number of non-zeros in dependence of lambda
plot(x = RIDGE$lambda, y = RIDGE_coef_non_zero, type = "l")
plot(x = RIDGE$lambda, y = LASSO_coef_non_zero, type = "l")
plot(x = LASSO$lambda, y = LASSO_coef_non_zero, type = "l")
knitr::opts_chunk$set(echo = TRUE)
# draw from standard normal
sn <- rnorm(10000)
plot(dnorm())
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(10000, mean = 0, sigma = sqrt(2))
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(10000, mean = 0, sd = sqrt(2))
n02
# draw from standard normal
sn <- rnorm(10000)
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(10000, mean = 0, sd = sqrt(2))
# draw from mu = 1, sigma^2 = 1
n11 <- rnorm(10000, mean = 1, sd = 1)
library(tidyverse)
data.frame(sn = sn, n02 = n02, n11 = n11)
df <- data.frame(sn = sn, n02 = n02, n11 = n11)
# plot first
ggplot(data = df) %>%
geom_density(aes(x = sn))
# plot first
ggplot(data = df) +
geom_density(aes(x = sn))
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
goem_density(aes(x = s02))
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = s02))
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02))
df <- data.frame(sn = sn, n02 = n02, n11 = n11) %>%
pivot_longer(cols = c(n02, n11))
df
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value)) +
facet_wrap(~ name)
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value)) +
facet_wrap(~ name) +
theme_base()
library(ggthemes)
# draw from standard normal
sn <- rnorm(10000)
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(10000, mean = 0, sd = sqrt(2))
# draw from mu = 1, sigma^2 = 1
n11 <- rnorm(10000, mean = 1, sd = 1)
df <- data.frame(sn = sn, n02 = n02, n11 = n11) %>%
pivot_longer(cols = c(n02, n11))
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value)) +
facet_wrap(~ name) +
theme_base()
# plot first
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value), color = "red") +
facet_wrap(~ name) +
theme_base()
# draw from standard normal
n = 10^6
sn <- rnorm(n)
# draw from standard normal
n = 10^6
sn <- rnorm(n)
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(n, mean = 0, sd = sqrt(2))
# draw from mu = 1, sigma^2 = 1
n11 <- rnorm(n, mean = 1, sd = 1)
df <- data.frame(sn = sn, n02 = n02, n11 = n11) %>%
pivot_longer(cols = c(n02, n11))
# plot the densities
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value), color = "red") +
facet_wrap(~ name) +
theme_base()
# get boundary points
boundary <- function(mu, sigma) {
c(x1 = 1/(sigma^2) * (- mu + sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))),
1/(sigma^2) * (- mu - sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))))
}
# get boundary points
boundary <- function(mu, sigma) {
c(x1 = 1/(sigma^2) * (- mu + sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))),
x2 = 1/(sigma^2) * (- mu - sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))))
}
boundary(mu = 0, sigma = sqrt(2))
boundary(mu = 1, sigma = sqrt(1))
boundary(mu = 0, sigma = sqrt(2))
boundary(mu = 1, sigma = sqrt(1))
b11[1
b11[1]
b11
b02 <- boundary(mu = 0, sigma = sqrt(2))
b11 <- boundary(mu = 1, sigma = sqrt(1))
# plot the densities
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value), color = "red") +
geom_vline(xintercept = b11[1]) +
facet_wrap(~ name) +
theme_base()
# plot the densities
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value), color = "red") +
geom_vline(xintercept = b11[1], linetype = "dashed") +
facet_wrap(~ name) +
theme_base()
x = 2 * sqrt(log(sqrt(2)))
x
knitr::opts_chunk$set(echo = TRUE)
b02 <- boundary(mu = 0, sigma = sqrt(2))
# get boundary points
boundary <- function(mu, sigma) {
c(x1 = 1/(sigma^2) * (- mu + sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))),
x2 = 1/(sigma^2) * (- mu - sqrt(sigma^2 * mu^2 + 2*log(sigma) * (sigma^4 + sigma^2))))
}
b02 <- boundary(mu = 0, sigma = sqrt(2))
b02
2 * sqrt(log(sqrt(2)))
knitr::opts_chunk$set(echo = TRUE)
n02
library(tidyverse)
library(ggthemes)
# draw from standard normal
n = 10^6
sn <- rnorm(n)
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(n, mean = 0, sd = sqrt(2))
# draw from mu = 1, sigma^2 = 1
n11 <- rnorm(n, mean = 1, sd = 1)
df <- data.frame(sn = sn, n02 = n02, n11 = n11) %>%
pivot_longer(cols = c(n02, n11))
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot(data = df) +
geom_density(aes(x = sn)) +
geom_density(aes(x = value), color = "red") +
facet_wrap(~ name) +
theme_base()
# draw from mu = 0, sigma^2 = 2
n02 <- rnorm(n, mean = 0, sd = sqrt(2))
# draw from mu = 1, sigma^2 = 1
n11 <- rnorm(n, mean = 1, sd = 1)
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
theme_base()
b_02 <- 2 * sqrt(log(sqrt(2)))
b_02
b_11 <- 0.5
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_hline(xintercept = b_02, linetype = "dashed", size = 1.1) +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
theme_base()
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_01, linetype = "dashed", size = 1.1) +
theme_base()
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_11, linetype = "dashed", size = 1.1) +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_11, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_11, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
?pnorm
pnorm(0.5)
qnorm(0.5)
# the bayes rate for N(1, 1) is
0.5 * pnorm(0.5) + 0.5 * (1 - pnorm(0.5, 1, 1))
pnorm(0.5)
pnorm(0.5, 1, 1)
# the bayes rate for N(1, 1) is
0.5 * pnorm(0.5) + 0.5 * (1 - pnorm(0.5, 1, 1))
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_11, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
?integrate
integrate(dnorm, lower = -Inf, upper = 0.5, mean = 0, sd = 1))
integrate(dnorm, lower = -Inf, upper = 0.5, mean = 0, sd = 1)
pnorm(0.5) + (1 - pnorm(0.5, 1, 1))
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# the bayes rate for N(0, 2) is
pnorm(-b_02, 0, 1) + integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2)) + (1 - pnorm(b_2, 0, 1))
integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))
str(integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2)))
# the bayes rate for N(0, 2) is
pnorm(-b_02, 0, 1) + integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + (1 - pnorm(b_2, 0, 1))
# the bayes rate for N(0, 2) is
pnorm(-b_02, 0, 1) + integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + (1 - pnorm(b_02, 0, 1))
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn), fill = "red") +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
-sqrt(2*log(2))
b_02 <- 2 * sqrt(log(sqrt(2)))
b_02
integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value
# the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# the bayes rate for N(0, 2) is
pnorm(-b_02, 0, 1) + integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + (1 - pnorm(b_02, 0, 1))
pnorm(-b_02, 0, 1)
integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value
(1 - pnorm(b_02, 0, 1))
# the bayes rate for N(0, 2) is
0.5 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.5 * (1 - pnorm(b_02, 0, 1))
# the bayes rate for N(0, 2) is
0.25 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.25 * (1 - pnorm(b_02, 0, 1))
b_02 <- 2 * sqrt(log(sqrt(2)))
b_11 <- 0.5
# a) the bayes rate for N(0, 2) is
0.5 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.5 * (1 - pnorm(b_02, 0, 1))
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# a) the bayes rate for N(0, 2) is
0.5 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.5 * (1 - pnorm(b_02, 0, 1))
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn), fill = "red") +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
# a) the bayes rate for N(0, 2) is
0.5 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.5 * (1 - pnorm(b_02, 0, 1))
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# a) the bayes rate for N(0, 2) is
0.5 * pnorm(-b_02, 0, 1) + 0.5* integrate(dnorm, lower = -b_02, upper = b_02, mean = 0, sd = sqrt(2))$value + + 0.5 * (1 - pnorm(b_02, 0, 1))
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 *  pnorm(b_11, 1, 1)
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 *  pnorm(b_11, 1, 1)
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * (1 - pnorm(b_11, 1, 1))
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * pnorm(b_11, 1, 1, lower.tail = T)
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * pnorm(b_11, 1, 1, lower.tail = F)
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11) + 0.5 * pnorm(b_11, 1, 1, lower.tail = F)
?pnorm
# plot the densities (boundaries have to be inserted but not so easy with one
# ggplot, maybe make two. Then it is just adding to vertical lines.)
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n02), color = "red") +
geom_vline(xintercept = b_02, linetype = "dashed", size = 1.1) +
geom_vline(xintercept = -b_02, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(0, 2)") +
theme_base()
ggplot() +
geom_density(aes(x = sn)) +
geom_density(aes(x = n11), color = "red") +
geom_vline(xintercept = b_11, linetype = "dashed", size = 1.1) +
labs(title = "x ~ N(1, 1)") +
theme_base()
# b) the bayes rate for N(1, 1) is
0.5 * pnorm(b_11, 1, 1) + 0.5 * pnorm(b_11, 0, 1, lower.tail = F)
1/2 / 1/2
choose(1, 0)
choose(1, 1)
2 * sqrt(0.12)
(0.09 + 2 * sqrt(0.12)) / 0.15
# inspect SIGMA to check whether we did everything correctly
SIGMA
options(scipen = 999)
# Get the parameters from the task a d means that scaling to daily was performed
sigma <- c(0.2, 0.25)
sigma_d <- sigma / sqrt(250)
rho <- 0.4
cov <- rho * prod(sigma)
cov_d <- rho * prod(sigma_d)
SIGMA <- matrix(rep(NA, 4), ncol = 2)
SIGMA[diag(T, 2, 2)] <- sigma^2
SIGMA[!diag(T, 2, 2)] <- cov
# inspect SIGMA to check whether we did everything correctly
SIGMA
# inspect again for daily
SIGMA_d
SIGMA_d <- matrix(rep(NA, 4), ncol = 2)
SIGMA_d[diag(T, 2, 2)] <- sigma_d^2
SIGMA_d[!diag(T, 2, 2)] <- cov_d
# inspect again for daily
SIGMA_d
w <- matrix(c(0.6, 0.4), ncol = 1)
alpha <- 0.99
mu <- matrix(c(0, 0), ncol = 1)
V <- 10^6
V
# Get parameters for the distribution of the portfolio.
# Both log return series are normal -> linear combination
# is also normal. So
mu_portfolio <- t(w) %*% mu
var_portfolio <- t(w) %*% SIGMA %*% w
# We get VaR as the value of the portfolio multiplied with
# the 99% quantile of the loss distribution
VaR <- V * qnorm(0.99, mean = mu_portfolio, sd = sqrt(var_portfolio))
VaR
# As the portfolio returns are normal we can exploit that daily VaR is just
# annual VaR / sqrt(250)
VAR_daily <- VaR / sqrt(250)
VAR_daily
# mu stays as mu == [0, 0]'
var_d_portfolio <- t(w) %*% SIGMA_d %*% w
# We get VaR as the value of the portfolio multiplied with
# the 99% quantile of the loss distribution
VaR_d <- V * qnorm(0.99, mean = mu_portfolio, sd = sqrt(var_d_portfolio))
# For Expected Shortfall we have a closed form expression. We implement a
# function
ES_normal <- function(a = 0.99, mu = 0, sd = sqrt(var_d_portfolio)) {
mu + sd * dnorm((qnorm(p = a, mean = 0, sd = 1))) / (1 - a)
}
VaR_d
# For Expected Shortfall we have a closed form expression. We implement a
# function
ES_normal <- function(a = 0.99, mu = 0, sd = sqrt(var_d_portfolio)) {
mu + sd * dnorm((qnorm(p = a, mean = 0, sd = 1))) / (1 - a)
}
ES_daily <- ES_normal()
V * ES_daily
